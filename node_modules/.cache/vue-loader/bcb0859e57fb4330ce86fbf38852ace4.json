{"remainingRequest":"/vagrant/snail-x-core-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/vagrant/snail-x-core-vue/src/components/auth/Register.vue?vue&type=style&index=0&id=4523026a&scoped=true&lang=css&","dependencies":[{"path":"/vagrant/snail-x-core-vue/src/components/auth/Register.vue","mtime":1539187047788},{"path":"/vagrant/snail-x-core-vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/vagrant/snail-x-core-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/vagrant/snail-x-core-vue/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/vagrant/snail-x-core-vue/node_modules/cache-loader/dist/cjs.js","mtime":1539182162602},{"path":"/vagrant/snail-x-core-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#register {\n    position: fixed;\n    top: 10%;\n    left: 11%;\n    width: 50%;\n    border: 1px solid grey;\n    background-color: #FFFFFF;\n    margin: 10em;\n    padding: 20px;\n}\n\ninput {\n    margin-bottom: 1em;\n}\n\ninput:invalid {\n  border: 2px dashed red;\n}\n\ninput:valid {\n  border: 2px solid black;\n}\n",{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Register.vue","sourceRoot":"src/components/auth","sourcesContent":["<template>\n    <div id=\"register\">\n        <form id=\"reg\"\n              @submit=\"checkForm\"\n              action=\"register()\"\n              method=\"post\">\n              <!--novalidate=\"true\"-->\n\n            <h3 class=\"page-title\">Register</h3>\n            <hr>\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" name=\"firstName\" v-model=\"firstName\"\n                       placeholder=\"First Name\" required/>\n                <input type=\"text\" class=\"form-control\" name=\"lastName\" v-model=\"lastName\"\n                       placeholder=\"Last Name\" required/>\n                <input type=\"email\" class=\"form-control\" name=\"email\" v-model=\"email\"\n                       placeholder=\"Email\" required/>\n                <input type=\"password\" class=\"form-control\" name=\"password\" v-model=\"password\"\n                       placeholder=\"Password\" required/>\n                <button style=\"float: right;\" type=\"button\" class=\"btn btn-primary\" @click=\"register()\">Register\n                </button>\n                <button style=\"margin-right: 1em; float: right\" type=\"button\" class=\"btn btn-warning\"\n                        onclick=\"window.history.back()\">Back\n                </button>\n            </div>\n        </form>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'Register',\n        data() {\n            return {\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n                password: \"\"\n            }\n        },\n        methods: {\n            checkForm: function (e) {\n                this.errors = [];\n                if (this.firstName.length > 100) {\n                    this.errors.push(\"First name exceeds maximum 100-character limit.\")\n                }\n                if (!this.firstName) {\n                    this.errors.push(\"First name is required.\");\n                }\n\n                if (this.lastName.length > 100) {\n                    this.errors.push(\"Last name exceeds maximum 100-character limit.\")\n                }\n                if (!this.lastName) {\n                    this.errors.push(\"Last name is required.\");\n                }\n\n                if (this.email.length > 100) {\n                    this.errors.push(\"Email exceeds maximum 100-character limit.\")\n                }\n                if (!this.email) {\n                    this.errors.push(\"Email is required.\");\n                } else if (!this.validEmail(this.email)) {\n                    this.errors.push('Valid email required.');\n                }\n\n                if (this.password.length > 100) {\n                    this.errors.push(\"Password exceeds maximum 100-character limit.\")\n                }\n                if (!this.password) {\n                    this.errors.push(\"Password is required.\")\n                }\n\n                if (!this.errors.length) {\n                    return true;\n                }\n\n                e.preventDefault();\n            },\n            validEmail: function (email) {\n                const re = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/;\n                return re.test(email);\n            },\n            register() {\n                this.$store.dispatch('registerUser', {\n                    firstName: this.firstName,\n                    lastName: this.lastName,\n                    email: this.email,\n                    password: this.password\n                })\n                    .then(() => {\n                        this.$router.push({name: 'login'})\n                    })\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    #register {\n        position: fixed;\n        top: 10%;\n        left: 11%;\n        width: 50%;\n        border: 1px solid grey;\n        background-color: #FFFFFF;\n        margin: 10em;\n        padding: 20px;\n    }\n\n    input {\n        margin-bottom: 1em;\n    }\n\n    input:invalid {\n      border: 2px dashed red;\n    }\n\n    input:valid {\n      border: 2px solid black;\n    }\n</style>"]}]}